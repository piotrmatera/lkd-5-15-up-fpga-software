#include "stdafx.h"

#define Efficient_conditioning(input, input_gain, output, output_avg, next_offset)\
    SD_dat1 = (float)input;\
    SD_dat1 -= offset, gain = input_gain;\
    SD_dat1 *= gain, offset = next_offset;\
    output = SD_dat1;

#define Efficient_conditioning_avg(input, input_gain, output, output_avg, next_offset)\
    SD_dat1 = (float)input;\
    SD_dat1 -= offset, gain = input_gain;\
    SD_dat1 *= gain, gain = output;\
    gain += SD_dat1, output = SD_dat1;\
    gain *= SD_dat2, offset = next_offset;\
    output_avg = gain

interrupt void Cla1Task1 ( void )
{
    Timer_PWM.CLA_START_TASK1 = TIMESTAMP_PWM;

    register float offset;
    register float gain;
    register float SD_dat1;
    register float SD_dat2;

    SD_dat2 = 0.5f;
    offset = Meas_ACDC_offset.U_grid.a;
    Efficient_conditioning_avg(EMIF_CLA.U_grid_a, Meas_ACDC_gain.U_grid.a, Meas_ACDC.U_grid.a, Meas_ACDC.U_grid_avg.a, Meas_ACDC_offset.U_grid.b);
    Efficient_conditioning_avg(EMIF_CLA.U_grid_b, Meas_ACDC_gain.U_grid.b, Meas_ACDC.U_grid.b, Meas_ACDC.U_grid_avg.b, Meas_ACDC_offset.U_grid.c);
    Efficient_conditioning_avg(EMIF_CLA.U_grid_c, Meas_ACDC_gain.U_grid.c, Meas_ACDC.U_grid.c, Meas_ACDC.U_grid_avg.c, Meas_ACDC_offset.I_grid.a);
    Efficient_conditioning_avg(EMIF_CLA.I_grid_a, Meas_ACDC_gain.I_grid.a, Meas_ACDC.I_grid.a, Meas_ACDC.I_grid_avg.a, Meas_ACDC_offset.I_grid.b);
    Efficient_conditioning_avg(EMIF_CLA.I_grid_b, Meas_ACDC_gain.I_grid.b, Meas_ACDC.I_grid.b, Meas_ACDC.I_grid_avg.b, Meas_ACDC_offset.I_grid.c);
    Efficient_conditioning_avg(EMIF_CLA.I_grid_c, Meas_ACDC_gain.I_grid.c, Meas_ACDC.I_grid.c, Meas_ACDC.I_grid_avg.c, Meas_ACDC_offset.U_dc);
    Efficient_conditioning_avg(EMIF_CLA.U_dc,     Meas_ACDC_gain.U_dc,     Meas_ACDC.U_dc,     Meas_ACDC.U_dc_avg,     Meas_ACDC_offset.U_dc_n);
    Efficient_conditioning_avg(EMIF_CLA.U_dc_n,   Meas_ACDC_gain.U_dc_n,   Meas_ACDC.U_dc_n,   Meas_ACDC.U_dc_n_avg,   Meas_ACDC_offset.I_conv.a);
    Efficient_conditioning_avg(EMIF_CLA.I_conv_a, Meas_ACDC_gain.I_conv.a, Meas_ACDC.I_conv.a, Meas_ACDC.I_conv_avg.a, Meas_ACDC_offset.I_conv.b);
    Efficient_conditioning_avg(EMIF_CLA.I_conv_b, Meas_ACDC_gain.I_conv.b, Meas_ACDC.I_conv.b, Meas_ACDC.I_conv_avg.b, Meas_ACDC_offset.I_conv.c);
    Efficient_conditioning_avg(EMIF_CLA.I_conv_c, Meas_ACDC_gain.I_conv.c, Meas_ACDC.I_conv.c, Meas_ACDC.I_conv_avg.c, Meas_ACDC_offset.I_conv.n);
    Meas_ACDC.I_conv.n = -(Meas_ACDC.I_conv.a + Meas_ACDC.I_conv.b + Meas_ACDC.I_conv.c);
    Meas_ACDC.I_conv_avg.n = (Meas_ACDC.I_conv_avg.a + Meas_ACDC.I_conv_avg.b + Meas_ACDC.I_conv_avg.c);

    Cla1SoftIntRegs.SOFTINTFRC.all =
    Cla1SoftIntRegs.SOFTINTEN.all = 1;

    Timer_PWM.CLA_MEAS_TASK1 = TIMESTAMP_PWM;

    ///////////////////////////////////////////////////////////////////

    CIC1_adaptive_global_CLAasm(&CIC1_adaptive_global__50Hz, Conv.f_filter);

    Resonant_filter_calc_CLAasm(&Conv.Resonant_U_grid[0], Meas_ACDC.U_grid.a);
    Resonant_filter_calc_CLAasm(&Conv.Resonant_U_grid[1], Meas_ACDC.U_grid.b);
    Resonant_filter_calc_CLAasm(&Conv.Resonant_U_grid[2], Meas_ACDC.U_grid.c);

    Resonant_filter_calc_CLAasm(&Conv.Resonant_I_grid[0], Meas_ACDC.I_grid.a);
    Resonant_filter_calc_CLAasm(&Conv.Resonant_I_grid[1], Meas_ACDC.I_grid.b);
    Resonant_filter_calc_CLAasm(&Conv.Resonant_I_grid[2], Meas_ACDC.I_grid.c);

    Resonant_filter_calc_CLAasm(&Conv.Resonant_I_conv[0], Meas_ACDC.I_conv.a);
    Resonant_filter_calc_CLAasm(&Conv.Resonant_I_conv[1], Meas_ACDC.I_conv.b);
    Resonant_filter_calc_CLAasm(&Conv.Resonant_I_conv[2], Meas_ACDC.I_conv.c);

    Timer_PWM.CLA_GRID1_TASK1 = TIMESTAMP_PWM;


    Timer_PWM.CLA_GRID2_TASK1 = TIMESTAMP_PWM;

    ///////////////////////////////////////////////////////////////////

    Converter_calc_master();
    Converter_calc_slave();

    Timer_PWM.CLA_CONV_TASK1 = TIMESTAMP_PWM;

    ///////////////////////////////////////////////////////////////////

    {
        Therm.Divider_supply += 0.001*( ((float)AdcdResultRegs.ADCRESULT0 + (float)AdcdResultRegs.ADCRESULT1)*(2e3/1e3)*(3.3/4096.0/2.0) - Therm.Divider_supply);
        Meas_ACDC.Supply_24V = ((float)AdcdResultRegs.ADCRESULT8 + (float)AdcdResultRegs.ADCRESULT9)*(11e3/1e3)*(3.3/4096.0/2.0);

        static float index;
        register float Thermistor;
        register Uint16 *adcresult = (Uint16 *)&AdcdResultRegs.ADCRESULT2 + (Uint16)(0x2*index);
        Thermistor = ( (float)*adcresult + (float)*(adcresult + 1) )*(3.3/256.0/16.0/2.0);
        Thermistor = (Therm.R_divider * Thermistor) / (3.3 - Thermistor);
        Thermistor = Therm.B/logf(Thermistor * Therm.DIV_Rinf) - Therm.T_0;
        register float *Temperature = &Meas_ACDC.Temperature1 + (Uint16)index;
        *Temperature += 0.02*(Thermistor - *Temperature);
        if(++index >= 3.0f) index = 0;
    }

    Timer_PWM.CLA_THERM_TASK1 = TIMESTAMP_PWM;

    ///////////////////////////////////////////////////////////////////

    CIC2_filter_CLAasm(&CIC2_calibration, *CIC2_calibration_input.ptr);

    CIC1_filter_CLAasm(&Conv.P_conv_filter, Conv.P_conv);
    CIC1_filter_CLAasm(&Conv.C_dc_filter, Conv.C_dc_meas);

    Timer_PWM.CLA_END_TASK1 = TIMESTAMP_PWM;
}

interrupt void Cla1Task2 ( void )
{

}

interrupt void Cla1Task3 ( void )
{

}

interrupt void Cla1Task4 ( void )
{

}

interrupt void Cla1Task5 ( void )
{

}

interrupt void Cla1Task6 ( void )
{

}

interrupt void Cla1Task7 ( void )
{

}

interrupt void Cla1Task8 ( void )
{

}
