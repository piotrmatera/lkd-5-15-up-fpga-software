#include "stdafx.h"

interrupt void Cla1Task1 ( void )
{
    Timer_PWM.CLA_START_TASK1 = TIMESTAMP_PWM;

    Cla1SoftIntRegs.SOFTINTFRC.all =
    Cla1SoftIntRegs.SOFTINTEN.all = 1;

    Timer_PWM.CLA_MEAS_TASK1 = TIMESTAMP_PWM;


    Timer_PWM.CLA_PLL_TASK1 = TIMESTAMP_PWM;

    Converter_calc();

    Timer_PWM.CLA_CONV_TASK1 = TIMESTAMP_PWM;

    Grid_analyzer_calc();

    Grid_analyzer_filter_calc();

//    CIC1_adaptive_global_CLAasm(&CIC1_adaptive_global__50Hz, CLA1toCLA2.w_filter * MATH_1_2PI);

    CIC2_filter_CLAasm(&CIC2_calibration, *CIC2_calibration_input.ptr);

    {
        Therm.Divider_supply += 0.001*( ((float)AdcdResultRegs.ADCRESULT0 + (float)AdcdResultRegs.ADCRESULT1)*(2e3/1e3)*(3.3/4096.0/2.0) - Therm.Divider_supply);
        Meas_master.Supply_24V = ((float)AdcdResultRegs.ADCRESULT8 + (float)AdcdResultRegs.ADCRESULT9)*(11e3/1e3)*(3.3/4096.0/2.0);

        static float index;
        register float Thermistor;
        register Uint16 *adcresult = (Uint16 *)&AdcdResultRegs.ADCRESULT2 + (Uint16)(0x2*index);
        Thermistor = ( (float)*adcresult + (float)*(adcresult + 1) )*(3.3/256.0/16.0/2.0);
        Thermistor = (Therm.R_divider * Thermistor) / (3.3 - Thermistor);
        Thermistor = Therm.B/logf(Thermistor * Therm.DIV_Rinf) - Therm.T_0;
        register float *Temperature = &Meas_master.Temperature1 + (Uint16)index;
        *Temperature += 0.02*(Thermistor - *Temperature);
        if(++index >= 3.0f) index = 0;
    }

    Timer_PWM.CLA_END_TASK1 = TIMESTAMP_PWM;
}

interrupt void Cla1Task2 ( void )
{

}

interrupt void Cla1Task3 ( void )
{

}

interrupt void Cla1Task4 ( void )
{

}

interrupt void Cla1Task5 ( void )
{

}

interrupt void Cla1Task6 ( void )
{

}

interrupt void Cla1Task7 ( void )
{

}

interrupt void Cla1Task8 ( void )
{

}
