#include "stdafx.h"

#define Efficient_conditioning(input, input_gain, output, output_avg, next_offset)\
    SD_dat1 = (float)input;\
    SD_dat1 -= offset, gain = input_gain;\
    SD_dat1 *= gain, gain = output;\
    gain += SD_dat1, output = SD_dat1;\
    gain *= SD_dat2, offset = next_offset;\
    output_avg = gain

interrupt void Cla1Task1 ( void )
{
    Timer_PWM.CLA_START_TASK = TIMESTAMP_PWM;

    register float offset;
    register float gain;
    register float SD_dat1;
    register float SD_dat2;

    SD_dat2 = 0.5f;
    offset = Meas_master_offset.U_grid.a;
    Efficient_conditioning(EMIF_CLA.U_grid_a, Meas_master_gain.U_grid.a, Meas_master.U_grid.a, Meas_master.U_grid_avg.a, Meas_master_offset.U_grid.b);
    Efficient_conditioning(EMIF_CLA.U_grid_b, Meas_master_gain.U_grid.b, Meas_master.U_grid.b, Meas_master.U_grid_avg.b, Meas_master_offset.U_grid.c);
    Efficient_conditioning(EMIF_CLA.U_grid_c, Meas_master_gain.U_grid.c, Meas_master.U_grid.c, Meas_master.U_grid_avg.c, Meas_master_offset.I_grid.a);
    Efficient_conditioning(EMIF_CLA.I_grid_a, Meas_master_gain.I_grid.a, Meas_master.I_grid.a, Meas_master.I_grid_avg.a, Meas_master_offset.I_grid.b);
    Efficient_conditioning(EMIF_CLA.I_grid_b, Meas_master_gain.I_grid.b, Meas_master.I_grid.b, Meas_master.I_grid_avg.b, Meas_master_offset.I_grid.c);
    Efficient_conditioning(EMIF_CLA.I_grid_c, Meas_master_gain.I_grid.c, Meas_master.I_grid.c, Meas_master.I_grid_avg.c, Meas_master_offset.U_dc);
    Efficient_conditioning(EMIF_CLA.U_dc,     Meas_master_gain.U_dc,     Meas_master.U_dc,     Meas_master.U_dc_avg,     Meas_master_offset.U_dc_n);
    Efficient_conditioning(EMIF_CLA.U_dc_n,   Meas_master_gain.U_dc_n,   Meas_master.U_dc_n,   Meas_master.U_dc_n_avg,   Meas_master_offset.I_conv.a);
    Efficient_conditioning(EMIF_CLA.I_conv_a, Meas_master_gain.I_conv.a, Meas_master.I_conv.a, Meas_master.I_conv_avg.a, Meas_master_offset.I_conv.b);
    Efficient_conditioning(EMIF_CLA.I_conv_b, Meas_master_gain.I_conv.b, Meas_master.I_conv.b, Meas_master.I_conv_avg.b, Meas_master_offset.I_conv.c);
    Efficient_conditioning(EMIF_CLA.I_conv_c, Meas_master_gain.I_conv.c, Meas_master.I_conv.c, Meas_master.I_conv_avg.c, Meas_master_offset.I_conv.n);
    Efficient_conditioning(EMIF_CLA.I_conv_n, Meas_master_gain.I_conv.n, Meas_master.I_conv.n, Meas_master.I_conv_avg.n, Meas_master_offset.I_conv.n);

    Converter_calc();

    Timer_PWM.CLA_CONV = TIMESTAMP_PWM;

    PLL_calc();

    Timer_PWM.CLA_PLL = TIMESTAMP_PWM;

    CIC1_adaptive_global_CLAasm(&CIC1_adaptive_global__50Hz, PLL.w_filter * MATH_1_2PI);

    ////////////////////////////////////////////////////////////////////////////////
    Timer_PWM.CLA_ENDTASK = TIMESTAMP_PWM;
}

interrupt void Cla1Task2 ( void )
{

}

interrupt void Cla1Task3 ( void )
{

}

interrupt void Cla1Task4 ( void )
{

}

interrupt void Cla1Task5 ( void )
{

}

interrupt void Cla1Task6 ( void )
{

}

interrupt void Cla1Task7 ( void )
{

}

interrupt void Cla1Task8 ( void )
{

}
